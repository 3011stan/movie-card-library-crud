{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","components/Copyright.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","role","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","data-testid","src","alt","width","height","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","modifiedRender","loading","key","getDataApi","a","movieAPI","res","MovieDetails","deleteMovieLocal","match","params","maxwidth","getMovieById","NewMovie","shouldRedirect","EditMovie","NotFound","Copyright","timeOut","renderCoptyright","renderDiv","href","rel","aria-hidden","App","basename","process","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3353ad6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst loading = 'Loading...';\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading-page\">\n        <div className=\"spinner-grow text-primary\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-secondary\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-success\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-danger\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-warning\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-info\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-light\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n        <div className=\"spinner-grow text-dark\" role=\"status\">\n          <span className=\"visually-hidden\">{loading}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"input-group\">\n        <label className=\"form-label\" htmlFor=\"movie_title\">\n          <h6>Título</h6>\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate form-control\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"input-group\">\n        <label htmlFor=\"movie_subtitle\">\n          <h6>Subtítulo</h6>\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n            className=\"form-control\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row input-group\">\n        <label htmlFor=\"movie_image\" id=\"label-src\">\n          <h6>Imagem</h6>\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n            className=\"form-control\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"input-group\">\n        <label htmlFor=\"movie_storyline\">\n          <h6>Sinopse</h6>\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n            className=\"form-control\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div className=\"input-group\">\n        <label htmlFor=\"movie_genre\" className=\"form-label\">\n          <h6>Gênero</h6>\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n            className=\"form-select form-select-default mb-4\"\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <h6>Avaliação</h6>\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n            className=\"\"\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n          className=\"btn btn-success\"\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <form className=\"row g-3 card\">\n        {this.renderTitleInput()}\n        {this.renderSubtitleInput()}\n        {this.renderImagePathInput()}\n        {this.renderStorylineInput()}\n        {this.renderGenreSelection()}\n        {this.renderRatingInput()}\n        {this.renderSubmitButton()}\n      </form>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nMovieForm.defaultProps = {\n  movie: '',\n  onSubmit: null,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, id, storyline, imagePath } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"card\">\n        <div className=\"card-body\">\n          <h3 className=\"card-title\">{ title }</h3>\n          <p className=\"card-text\">{ storyline }</p>\n        </div>\n        <img\n          src={ imagePath }\n          alt={ `Capa do filme ${title}` }\n          width=\"100%\"\n          height=\"300px\"\n          className=\"card-img-bottom\"\n        />\n        <small className=\"text-muted\">{`Capa do filme ${title}` }</small>\n        <Link to={ `/movies/${id}` } className=\"btn btn-secondary\">\n          VER DETALHES\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'https://i2.wp.com/www.portallos.com.br/wp-content/uploads/2016/12/Kingsglaive-FFXV-009.jpg?fit=1200%2C675&ssl=1',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'https://mercury-media.cursecdn.com/attachments/4/199/final-fantasy-the-spirits-within-original.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'https://www.einerd.com.br/wp-content/uploads/2017/04/Ghost.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'https://musicart.xboxlive.com/6/cfb36573-0000-0000-0000-000000000009/504/image.jpg?w=1920&h=1080',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'https://cdn.ome.lt/gijUu798rUAKU533ArsCajZuNWs=/970x360/smart/uploads/conteudo/fotos/resident-evil-4-header_80BpabY.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../components';\nimport MovieCard from '../components/MovieCard';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n\n    this.getDataApi = this.getDataApi.bind(this);\n    this.modifiedRender = this.modifiedRender.bind(this);\n  }\n\n  componentDidMount() {\n    this.getDataApi();\n  }\n\n  async getDataApi() {\n    const { getMovies } = movieAPI;\n    this.setState({\n      loading: true,\n    });\n    const res = await getMovies();\n    this.setState({\n      movies: res,\n      loading: false,\n    });\n  }\n\n  modifiedRender = () => {\n    const { movies, loading } = this.state;\n\n    if (loading) return <Loading />;\n    // console.log(movies);\n    return (\n      <div data-testid=\"movie-list\" className=\"container\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n        <Link to=\"/movies/new\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n          >\n            ADICIONAR CARTÃO\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    // Render Loading here if the request is still happening\n\n    return (\n      <>\n        { this.modifiedRender()}\n      </>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      loading: false,\n    };\n    this.getMovieById = this.getMovieById.bind(this);\n    this.modifiedRender = this.modifiedRender.bind(this);\n    this.deleteMovieLocal = this.deleteMovieLocal.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieById();\n  }\n\n  async getMovieById() {\n    const { getMovie } = movieAPI;\n    const { match } = this.props;\n    const { id } = match.params;\n    this.setState({\n      loading: true,\n    });\n    const res = await getMovie(id);\n    this.setState({\n      movies: res,\n      loading: false,\n    });\n  }\n\n  deleteMovieLocal = () => {\n    const { deleteMovie } = movieAPI;\n    const { match: { params: { id } } } = this.props;\n    deleteMovie(id);\n  }\n\n  modifiedRender = () => {\n    const { movies, loading } = this.state;\n    const { imagePath, subtitle, storyline, genre, rating, title } = movies;\n    // console.log(imagePath);\n    const { match: { params: { id } } } = this.props;\n    if (loading) return <Loading />;\n    return (\n      <section className=\"card mb-3\" maxwidth=\"500px\">\n        <img\n          src={ imagePath }\n          alt={ `Capa do filme ${title}` }\n          // width=\"80%\"\n          height=\"500px\"\n          className=\"card-img-top\"\n        />\n        <figcaption\n          className=\"figure-caption text-end\"\n        >\n          { `Capa do filme ${title}` }\n        </figcaption>\n        <div>\n          <h5 className=\"card-title\">{ `Title: ${title}`}</h5>\n          <h5 className=\"card-title d-inline\">\n            Subtitle:\n          </h5>\n          <p className=\"card-text d-inline\">\n            {' '}\n            { subtitle }\n          </p>\n          <br />\n          <h5 className=\"card-title d-inline\">Storyline:</h5>\n          <p className=\"card-text d-inline\">\n            {' '}\n            { storyline}\n          </p>\n          <br />\n          <h5 className=\"card-title d-inline\">Genre:</h5>\n          <p className=\"card-text d-inline\">\n            {' '}\n            {genre}\n          </p>\n          <br />\n          <h5 className=\"card-title d-inline\">Rating:</h5>\n          <p className=\"card-text d-inline\">\n            { ' ' }\n            {rating}\n          </p>\n          <br />\n          <Link to={ `/movies/${id}/edit` } className=\"btn btn-outline-secondary\">\n            EDITAR\n          </Link>\n          <Link to=\"/\" className=\"btn btn-outline-secondary\">\n            VOLTAR\n          </Link>\n          <Link to=\"/\" onClick={ this.deleteMovieLocal } className=\"btn btn-danger\">\n            DELETAR\n          </Link>\n        </div>\n      </section>\n    );\n  }\n\n  render() {\n    return (\n      <div data-testid=\"movie-details\">\n        { this.modifiedRender() }\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.object,\n}.isRequerid;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    // req. API????\n    const { createMovie } = movieAPI;\n    const res = await createMovie(newMovie);\n    if (res) this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      status: '',\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovieById = this.getMovieById.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieById();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    const res = await updateMovie(updatedMovie);\n    if (res) this.setState({ shouldRedirect: true });\n  }\n\n  async getMovieById() {\n    const { getMovie } = movieAPI;\n    const { match: { params: { id } } } = this.props;\n    this.setState({\n      status: 'loading',\n      shouldRedirect: false,\n    });\n    const res = await getMovie(id);\n    this.setState({\n      movie: res,\n      status: 'loaded',\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"card\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.object,\n}.isRequerid;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\n\nconst threeSeconds = 3000;\n\nclass Copyright extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timeOut: false,\n    };\n    this.renderCoptyright = this.renderCoptyright.bind(this);\n    this.renderDiv = this.renderDiv.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderCoptyright();\n  }\n\n  renderCoptyright() {\n    setTimeout(() => {\n      this.setState({ timeOut: true });\n    }, threeSeconds);\n  }\n\n  renderDiv() {\n    return (\n      <>\n        <p className=\"copyright\">© Copyright Stans 2021. All rights reserved</p>\n        <a\n          className=\"github\"\n          id=\"link-github\"\n          href=\"https://github.com/3011stan\"\n          rel=\"noopener noreferrer\"\n        >\n          <i className=\"fab fa-github-alt\" aria-hidden=\"true\" />\n        </a>\n      </>\n    );\n  }\n\n  render() {\n    const { timeOut } = this.state;\n    return !timeOut ? <span /> : this.renderDiv();\n  }\n}\n\nexport default Copyright;\n","import React from 'react';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n// import { Link, Route, BrowserRouter, Router } from 'react-dom';\nimport './App.css';\nimport Copyright from './components/Copyright';\n\nfunction App() {\n  return (\n    <>\n      <header className=\"container\">\n        <h1 className=\"display-2\">Movie Card Library CRUD</h1>\n      </header>\n      <HashRouter basename={ process.env.PUBLIC_URL }>\n        <Switch>\n          <Route\n            path={ `${process.env.PUBLIC_URL}/movies/:id/edit` }\n            component={ EditMovie }\n          />\n          <Route\n            path={ `${process.env.PUBLIC_URL}/movies/new` }\n            component={ NewMovie }\n          />\n          <Route\n            exact\n            path={ `${process.env.PUBLIC_URL}/` }\n            component={ MovieList }\n          />\n          <Route\n            path={ `${process.env.PUBLIC_URL}/movies/:id` }\n            component={ MovieDetails }\n          />\n          <Route path=\"*\" component={ NotFound } />\n        </Switch>\n      </HashRouter>\n      <footer className=\"footer-class text-muted\">\n        <Copyright />\n      </footer>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}